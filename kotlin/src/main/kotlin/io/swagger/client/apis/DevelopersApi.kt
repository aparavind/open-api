/**
* Simple Inventory API
* This is a simple API
*
* OpenAPI spec version: 1.0.1
* Contact: aravind.a.padmanabhan@gmail.com
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/
package io.swagger.client.apis

import io.swagger.client.models.InventoryItem

import io.swagger.client.infrastructure.*

class DevelopersApi(basePath: kotlin.String = "https://virtserver.swaggerhub.com/aparavind/netraLib/1.0.1") : ApiClient(basePath) {

    /**
    * searches inventory
    * By passing in the appropriate options, you can search for available inventory in the system 
    * @param searchString pass an optional search string for looking up inventory (optional)
    * @param skip number of records to skip for pagination (optional)
    * @param limit maximum number of records to return (optional)
    * @return kotlin.Array<InventoryItem>
    */
    @Suppress("UNCHECKED_CAST")
    fun searchInventory(searchString: kotlin.String, skip: kotlin.Int, limit: kotlin.Int) : kotlin.Array<InventoryItem> {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("searchString" to listOf("$searchString"), "skip" to listOf("$skip"), "limit" to listOf("$limit"))
        
        val contentHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val acceptsHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf("Accept" to "application/json")
        val localVariableHeaders: kotlin.collections.MutableMap<kotlin.String,kotlin.String> = mutableMapOf()
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)
        
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/inventory",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Array<InventoryItem>>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<InventoryItem>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

}
